import{j as a,u as N,b as Y,c as g}from"./index.C-M3_CjP.js";import{r}from"./index.Cpi2Ks0G.js";import{c as y,T as q,O as J,W as K,C as Q,b as U,D as X,d as _,P as Z,e as ee}from"./index.C3Bs01oF.js";import{c as te}from"./index.Dox3Ggkk.js";import{b as C}from"./button.Ry9IsCwB.js";function oe(e,t=[]){let o=[];function s(i,l){const c=r.createContext(l),d=o.length;o=[...o,l];const p=f=>{const{scope:x,children:v,...A}=f,B=x?.[e]?.[d]||c,V=r.useMemo(()=>A,Object.values(A));return a.jsx(B.Provider,{value:V,children:v})};p.displayName=i+"Provider";function D(f,x){const v=x?.[e]?.[d]||c,A=r.useContext(v);if(A)return A;if(l!==void 0)return l;throw new Error(`\`${f}\` must be used within \`${i}\``)}return[p,D]}const n=()=>{const i=o.map(l=>r.createContext(l));return function(c){const d=c?.[e]||i;return r.useMemo(()=>({[`__scope${e}`]:{...c,[e]:d}}),[c,d])}};return n.scopeName=e,[s,ae(n,...t)]}function ae(...e){const t=e[0];if(e.length===1)return t;const o=()=>{const s=e.map(n=>({useScope:n(),scopeName:n.scopeName}));return function(i){const l=s.reduce((c,{useScope:d,scopeName:p})=>{const f=d(i)[`__scope${p}`];return{...c,...f}},{});return r.useMemo(()=>({[`__scope${t.scopeName}`]:l}),[l])}};return o.scopeName=t.scopeName,o}var h="AlertDialog",[re,Se]=oe(h,[y]),u=y(),j=e=>{const{__scopeAlertDialog:t,...o}=e,s=u(t);return a.jsx(ee,{...s,...o,modal:!0})};j.displayName=h;var se="AlertDialogTrigger",R=r.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...s}=e,n=u(o);return a.jsx(q,{...n,...s,ref:t})});R.displayName=se;var ne="AlertDialogPortal",b=e=>{const{__scopeAlertDialog:t,...o}=e,s=u(t);return a.jsx(Z,{...s,...o})};b.displayName=ne;var le="AlertDialogOverlay",S=r.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...s}=e,n=u(o);return a.jsx(J,{...n,...s,ref:t})});S.displayName=le;var m="AlertDialogContent",[ie,ce]=re(m),w=r.forwardRef((e,t)=>{const{__scopeAlertDialog:o,children:s,...n}=e,i=u(o),l=r.useRef(null),c=N(t,l),d=r.useRef(null);return a.jsx(K,{contentName:m,titleName:P,docsSlug:"alert-dialog",children:a.jsx(ie,{scope:o,cancelRef:d,children:a.jsxs(Q,{role:"alertdialog",...i,...n,ref:c,onOpenAutoFocus:te(n.onOpenAutoFocus,p=>{p.preventDefault(),d.current?.focus({preventScroll:!0})}),onPointerDownOutside:p=>p.preventDefault(),onInteractOutside:p=>p.preventDefault(),children:[a.jsx(Y,{children:s}),a.jsx(pe,{contentRef:l})]})})})});w.displayName=m;var P="AlertDialogTitle",E=r.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...s}=e,n=u(o);return a.jsx(U,{...n,...s,ref:t})});E.displayName=P;var T="AlertDialogDescription",O=r.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...s}=e,n=u(o);return a.jsx(X,{...n,...s,ref:t})});O.displayName=T;var de="AlertDialogAction",$=r.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...s}=e,n=u(o);return a.jsx(_,{...n,...s,ref:t})});$.displayName=de;var M="AlertDialogCancel",I=r.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...s}=e,{cancelRef:n}=ce(M,o),i=u(o),l=N(t,n);return a.jsx(_,{...i,...s,ref:l})});I.displayName=M;var pe=({contentRef:e})=>{const t=`\`${m}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${m}\` by passing a \`${T}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${m}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;return r.useEffect(()=>{document.getElementById(e.current?.getAttribute("aria-describedby"))||console.warn(t)},[t,e]),null},ue=j,ge=R,me=b,F=S,z=w,H=$,L=I,k=E,G=O;const we=ue,Pe=ge,fe=me,W=r.forwardRef(({className:e,...t},o)=>a.jsx(F,{className:g("fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",e),...t,ref:o}));W.displayName=F.displayName;const Ae=r.forwardRef(({className:e,...t},o)=>a.jsxs(fe,{children:[a.jsx(W,{}),a.jsx(z,{ref:o,className:g("fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",e),...t})]}));Ae.displayName=z.displayName;const xe=({className:e,...t})=>a.jsx("div",{className:g("flex flex-col space-y-2 text-center sm:text-left",e),...t});xe.displayName="AlertDialogHeader";const ve=({className:e,...t})=>a.jsx("div",{className:g("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",e),...t});ve.displayName="AlertDialogFooter";const De=r.forwardRef(({className:e,...t},o)=>a.jsx(k,{ref:o,className:g("text-lg font-semibold",e),...t}));De.displayName=k.displayName;const Ne=r.forwardRef(({className:e,...t},o)=>a.jsx(G,{ref:o,className:g("text-sm text-muted-foreground",e),...t}));Ne.displayName=G.displayName;const ye=r.forwardRef(({className:e,...t},o)=>a.jsx(H,{ref:o,className:g(C(),e),...t}));ye.displayName=H.displayName;const _e=r.forwardRef(({className:e,...t},o)=>a.jsx(L,{ref:o,className:g(C({variant:"outline"}),"mt-2 sm:mt-0",e),...t}));_e.displayName=L.displayName;export{we as A,Pe as a,Ae as b,xe as c,De as d,Ne as e,ve as f,_e as g,ye as h};
